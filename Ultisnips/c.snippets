snippet cm "Comment Section"
/* ${0} */
endsnippet

snippet st "printf"
printf(${0});
endsnippet

snippet sd "printf"
printf("<%s %d>\n",__func__, __LINE__);
${0}
endsnippet


snippet s64 "printf"
%" PRId64 "${0}
endsnippet


snippet head "printf"
/*********************************************************************************
 * @file        `!p snip.rv = fn`
 * @brief       ${1}
 * @details     ${2}
 * @author      wwq
 * @date        `date +%Y/%m/%d`
 * @copyright   Copyright (c) `date +%Y` CICTCI V2X Division.
 * @verbatim
 *
 *  Change History:
 *  Date          Author       Version       Description
 *  ------------------------------------------------------------------------------
 *  `date +%Y/%m/%d`     wwq         1.0           Create this file
 *
 * @endverbatim
 ********************************************************************************/
 ${3}
endsnippet

snippet hexdump "hexdump"
std::string hexdump(const void *buf, size_t len) {
	std::string ret("\r\n");
	char tmp[8];
	const uint8_t *data = (const uint8_t *) buf;
	for (size_t i = 0; i < len; i += 16) {
		for (int j = 0; j < 16; ++j) {
			if (i + j < len) {
				int sz = snprintf(tmp, sizeof(tmp), "%.2x ", data[i + j]);
				ret.append(tmp, sz);
			} else {
				int sz = snprintf(tmp, sizeof(tmp), "   ");
				ret.append(tmp, sz);
			}
		}
		for (int j = 0; j < 16; ++j) {
			if (i + j < len) {
				ret += (is_safe(data[i + j]) ? data[i + j] : '.');
			} else {
				ret += (' ');
			}
		}
		ret += ('\n');
	}
	return ret;
}
endsnippet
snippet hexmem "hexmem"
std::string hexmem(const void *buf, size_t len)
{
	std::string ret;
	char tmp[8];
	const uint8_t *data = (const uint8_t *) buf;
	for (size_t i = 0; i < len; ++i) {
		int sz = sprintf(tmp, "%.2x ", data[i]);
		ret.append(tmp, sz);
	}
	return ret;
}
endsnippet
